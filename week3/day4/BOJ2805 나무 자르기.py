'''
[문제 풀이]
- 상근이는 나무 M미터가 필요함 → 직접 나무를 잘라서 구할 예정
- 목제 절단기 동작 방식
    - 절단기에 높이 H 지정 ( 0 ≤ H )
    - 한 줄에 있는 연속해 있는 나무 모두 절단
        - 높이가 H보다 큰 나무는 H 위의 부분이 잘릴 것이고, 낮은 나무는 잘리지 않을 것
- 한 줄에 연속해있는 나무의 높이가 20, 15, 10, 17이라고 하자.
    - 상근이가 높이를 15로 지정했다면, 나무를 자른 뒤의 높이는 15, 15, 10, 15가 될 것이고, 상근이는 길이가 5인 나무와 2인 나무를 들고 집에 갈 것 → 총 7m
- M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성

[의사결정]
- 가장 높은 나무를 최대 톱 높이로 두고 해당 기준으로 이분탐색
- ‘나무의 높이의 합은 항상 M보다 크거나 같기 때문에, 상근이는 집에 필요한 나무를 항상 가져갈 수 있다’
    - 무조건 나무의 높이 합이 M이랑 같지 않아도 된다

'''

n, m = map(int, input().split())

trees = list(map(int, input().split()))
cutter_height = 0

l = 0
# 톱 높이의 최댓값 (가장 큰 나무 높이)
r = max(trees)

while l <= r:

    # 톱의 중간 높이(mid) 계산
    mid = (l + r) // 2

    # 중간 높이로 잘랐을 때 얻을 수 있는 나무 길이 합 계산
    tree_h = 0
    for tree in trees:

        # 나무의 길이가 중간 높이보다 크다면, 자른 나무 길이를 더함
        if tree - mid > 0:
            tree_h += tree - mid

        # 자른 나무 길이(tree_h)가 필요한 길이(m)보다 크거나 같으면
    if tree_h >= m:
        # 현재 중간 높이를 최적의 톱 높이로 갱신
        cutter_height = mid

        # 더 큰 톱 높이를 시도하기 위해 왼쪽 범위 증가
        l = mid + 1
    elif tree_h < m:

        # 톱 높이를 줄이기 위해 오른쪽 범위 감소
        r = mid - 1

print(cutter_height)
